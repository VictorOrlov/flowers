#"""
#Type for Competition
#"""
type Competition {
  id: Int!
  kind: String!
  name: String!
  nameEn: String
  nameTt: String
  requests: [Request!]
  voices: [Voice!]
  winners: [Winner!]
}

#"""
#Type for Coordinate
#"""
type Coordinate {
  id: Int!
  latitude: Float!
  longitude: Float!
  requestId: String!
}

#"""
#Autogenerated return type of CreateRequest
#"""
type CreateRequestPayload {
  request: Request!
}

#"""
#Autogenerated return type of CreateVoice
#"""
type CreateVoicePayload {
  id: Int!
}

#"""
#Autogenerated return type of DestroyVoice
#"""
type DestroyVoicePayload {
  resolve: Boolean!
}

#"""
#Autogenerated return type of EditRequest
#"""
type EditRequestPayload {
  request: Request!
}

type Mutation {
  createRequest(address: String!, competition: String!, description: String, email: String!, latitude: Float, longitude: Float, participantKind: ParticipantKind!, participantName: String, phone: String!, photos: [String!]!): CreateRequestPayload
  createVoice(requestId: Int!): CreateVoicePayload
  destroyVoice(voiceId: Int!): DestroyVoicePayload
  editRequest(address: String, competition: String, description: String, email: String, latitude: Float, longitude: Float, participantName: String, phone: String, photos: [String!]): EditRequestPayload
}

#"""
#Type for Participant
#"""
type Participant {
  id: Int!
  kind: String!
  name: String
  request: Request
  user: User
}

#"""
#All available participatn types
#"""
enum ParticipantKind {
  #"""
  #kind legal entity
  #"""
  entity

  #"""
  #kind individual person
  #"""
  individual
}

#"""
#Type for Photo
#"""
type Photo {
  id: Int!
  request: Request!
  url: String
}

type Query {
  #"""
  #Get competition by id
  #"""
  competition(id: Int!): Competition!

  #"""
  #Get all competitions
  #"""
  competitions: [Competition!]!

  #"""
  #Get coordinate by id
  #"""
  coordinate(id: Int!): Coordinate!

  #"""
  #Get participant by id
  #"""
  participant(id: Int!): Participant

  #"""
  #Get photo by id
  #"""
  photo(id: Int!): Photo

  #"""
  #Get request by id
  #"""
  request(id: Int!): Request

  #"""
  #Get all data for start page
  #"""
  startPage(competitionId: Int, page: Int, search: String, sort: Sorting): StartPage!

  #"""
  #Get user by id
  #"""
  user(id: Int!): User

  #"""
  #Get voice by id
  #"""
  voice(id: Int!): Voice
}

#"""
#Type for Request
#"""
type Request {
  address: String!
  comment: String
  competition: Competition!
  coordinate: Coordinate
  createdAt: String!
  description: String
  id: Int!
  participant: Participant!
  photos: [Photo!]!
  state: String!
  voicesCount: Int!
  winner: Winner
  year: Int!
}

#"""
#All available sorting by requests
#"""
enum Sorting {
  #"""
  #asc for created_at
  #"""
  created_asc

  #"""
  #desc for created_at
  #"""
  created_desc

  #"""
  #asc for count woices
  #"""
  raiting_asc

  #"""
  #desc for count woices
  #"""
  raiting_desc
}

#"""
#Get data for start page
#"""
type StartPage {
  pagesCount: Int!
  requests: [Request!]
  requestsCount: Int!
  user: User
  voicesCount: Int!
  winnersCurrentYear: [Winner!]
  winnersPreviousYear: [Winner!]
}

#"""
#Type for User
#"""
type User {
  email: String
  id: Int!
  name: String
  participant: Participant
  phone: String
  remainVoices: Int
  roles: [String!]!
  surname: String
  voices: [Voice!]
}

#"""
#Type for Voice
#"""
type Voice {
  competition: Competition!
  id: Int!
  request: Request!
  user: User!
}

#"""
#Type for WinnerType
#"""
type Winner {
  competition: Competition!
  id: Int!
  place: Int!
  request: Request!
}